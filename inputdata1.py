# -*- coding: utf-8 -*-
"""InputData1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R9XeNugmEcoqJnvobjm17G0j9ZfF9YgU
"""

# Vivian Luu
# 1/19/2024
# Qualitative data is data that cannot be counted and measured. It is descriptive
# and deals with properties that are not numerical. An example would be different
# types of shoes. Quantative data deals with numerical data that can be measured
# and counted. These numbers can be discrete or continous. An example would be
# the number of books on a shelf.
# Casting is converting data from one type to another. We do this by using
# casting functions. An example where we might to use this is when taking the
# average number of children in a household. The answer may end up as a float but
# you cannot have part of a child so we could cast the number into an integer.
# Precision is the number of significant digits in the number before and after
# the decimal. Scale only defines the fraction part of the number, it's the number
# of significant digits after the decimal point. An example using the number
# 259.147 would be the precision is 6 because there are 6 significant digits that
# contribute to the accuracy of the number. The scale of that number would be 3
# since it is only significant numbers after the decimal.

# Problem 1
print("Vivian","Luu","\n""vivianluu222@gmail.com")

# Problem 2
x = 100
y = 15
print(x*y)
print(type((x*y)))
print(x/y)
print(type((x/y)))

# Problem 3
x = input("Please type an integer:")
x = int(x)
y = input("Please type another integer:")
y = int(y)
print(x,"*",y,"=",x*y)
print(type(x*y))
print(x,"/",y,"=",x/y)
print(type(x/y))

"""Problem 4

1) true
2) false
3) true
"""

# Problem 5
uofu = "University of Utah"
print(uofu[14],uofu[8],uofu[4],uofu[6],sep="",end="!")

# Problem 6
ham = "To be, or not to be, that is the question: Whether 'tis nobler in the mind to suffer The slings and arrows of outrageous fortune, Or to take arms against a sea of troubles And by opposing end them."
thorn = ham[-25]+ham[2]+ham[8]+ham[4]+ham[3:5]+ham[59]+ham[51]+ham[27]+ham[2]+ham[21:23]+ham[7:9]+ham[10]+ham[-1]
print(thorn)